const express = require('express');
const http = require('http');
const socketIo = require('socket.io');

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// Serve a single HTML page with embedded CSS and JS
app.get('/', (req, res) => {
    res.send(`
<!DOCTYPE html>
<html>
<head>
    <title>Real-Time Chat</title>
    <style>
        body { font-family: Arial; }
        #chat { border: 1px solid #ccc; height: 300px; overflow-y: scroll; padding: 5px; }
        #online-users { font-size: 0.9em; color: gray; }
    </style>
</head>
<body>
    <h2>Real-Time Chat</h2>
    <p id="online-users">Online users: </p>
    <div id="chat"></div>
    <input id="msg" placeholder="Type a message..." />
    <button onclick="sendMessage()">Send</button>

    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        let username = prompt("Enter your username:");
        socket.emit('setUsername', username);

        const chatBox = document.getElementById('chat');
        const msgInput = document.getElementById('msg');
        const userList = document.getElementById('online-users');

        function appendMessage(message) {
            const p = document.createElement('p');
            p.textContent = message;
            chatBox.appendChild(p);
            chatBox.scrollTop = chatBox.scrollHeight;
        }

        function sendMessage() {
            const msg = msgInput.value.trim();
            if (msg) {
                socket.emit('chatMessage', msg);
                msgInput.value = '';
            }
        }

        socket.on('message', (message) => {
            appendMessage(message);
        });

        socket.on('userList', (users) => {
            userList.textContent = 'Online users: ' + users.join(', ');
        });
    </script>
</body>
</html>
    `);
});

// WebSocket logic
const users = {};

io.on('connection', (socket) => {
    console.log('New user connected:', socket.id);

    socket.on('setUsername', (username) => {
        users[socket.id] = username;
        io.emit('userList', Object.values(users));
        socket.broadcast.emit('message', \`\${username} joined the chat\`);
    });

    socket.on('chatMessage', (msg) => {
        const username = users[socket.id] || 'Anonymous';
        io.emit('message', \`\${username}: \${msg}\`);
    });

    socket.on('disconnect', () => {
        const username = users[socket.id];
        delete users[socket.id];
        io.emit('userList', Object.values(users));
        if (username) {
            io.emit('message', \`\${username} left the chat\`);
        }
    });
});

// Start the server
server.listen(3000, () => {
    console.log('Server running on http://localhost:3000');
});
